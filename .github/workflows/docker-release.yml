name: Docker Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag_type:
        description: 'Type of tag to create'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Tag for main branch
            type=ref,event=branch,suffix={{date '.YYYYMMDD'}}
            type=raw,value=latest,enable={{is_default_branch}}
            
            # Tag for develop branch
            type=ref,event=branch,suffix=-dev,enable=${{ github.ref == 'refs/heads/develop' }}
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/develop' }}
            
            # Tag for version tags
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            
            # Tag for PR
            type=ref,event=pr,suffix=-pr
            
            # Commit SHA tag
            type=sha,prefix=sha-,format=short
            
            # Date tag for releases
            type=raw,value={{date 'YYYY.MM.DD'}},enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  create-release:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    permissions:
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract release notes
        id: release_notes
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Create release notes
          cat > release_notes.md << EOF
          ## Docker Images
          
          ### Pull Commands
          \`\`\`bash
          # Latest release
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION
          
          # Latest stable
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          \`\`\`
          
          ### Available Tags
          - \`$VERSION\` - This specific release
          - \`latest\` - Latest stable release
          - \`$(echo $VERSION | cut -d. -f1)\` - Major version
          - \`$(echo $VERSION | cut -d. -f1-2)\` - Major.Minor version
          
          ### Features
          - SVT Play downloader web interface
          - Real-time download progress
          - TypeScript backend with type safety
          - Vue.js frontend with modern UI
          - Docker containerized deployment
          
          ### Usage
          \`\`\`bash
          docker run -d \\
            --name svtplay-dl-webui \\
            -p 3001:3001 \\
            -v \$(pwd)/downloads:/app/downloads \\
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION
          \`\`\`
          
          Access the application at: http://localhost:3001
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [build-and-push]
    
    steps:
      - name: Delete untagged images
        uses: actions/github-script@v7
        with:
          script: |
            const response = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
              package_type: 'container',
              package_name: '${{ env.IMAGE_NAME }}',
              org: '${{ github.repository_owner }}',
            });
            
            const untaggedVersions = response.data.filter(version => 
              version.metadata.container.tags.length === 0
            );
            
            for (const version of untaggedVersions) {
              console.log(`Deleting untagged version: ${version.id}`);
              await github.rest.packages.deletePackageVersionForOrg({
                package_type: 'container',
                package_name: '${{ env.IMAGE_NAME }}',
                org: '${{ github.repository_owner }}',
                package_version_id: version.id,
              });
            }
