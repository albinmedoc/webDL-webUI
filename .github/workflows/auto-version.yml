name: Auto Versioning

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'screenshots/**'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  version-and-tag:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"
    permissions:
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Determine version increment
        id: version_type
        run: |
          # Check commit messages for version hints
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
          elif echo "$COMMIT_MSG" | grep -q "BREAKING CHANGE\|^feat!\|^fix!\|^chore!"; then
            VERSION_TYPE="major"
          elif echo "$COMMIT_MSG" | grep -q "^feat"; then
            VERSION_TYPE="minor"
          else
            VERSION_TYPE="patch"
          fi
          
          echo "type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "Detected version increment: $VERSION_TYPE"

      - name: Bump version
        id: bump_version
        run: |
          npm version ${{ steps.version_type.outputs.type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update package-lock.json
        run: |
          npm install --package-lock-only

      - name: Commit version bump
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to v${{ steps.bump_version.outputs.new_version }} [skip ci]"

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.bump_version.outputs.new_version }}" -m "Release v${{ steps.bump_version.outputs.new_version }}"
          git push origin main
          git push origin "v${{ steps.bump_version.outputs.new_version }}"

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
