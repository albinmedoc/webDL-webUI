name: Development Build

on:
  push:
    branches:
      - develop
      - feature/*
      - fix/*
      - hotfix/*
  pull_request:
    types: [opened, synchronize, reopened]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Build application
        run: npm run build

      - name: Build backend
        run: npm run build:backend

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Branch name for pushes
            type=ref,event=branch
            
            # PR number for pull requests
            type=ref,event=pr,prefix=pr-
            
            # Short SHA for all builds
            type=sha,prefix=sha-,format=short
            
            # Date for development builds
            type=raw,value={{date 'YYYY.MM.DD-HHmm'}},suffix=-dev

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Comment PR with image info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const tags = `${{ steps.meta.outputs.tags }}`.split('\n');
            const prTag = tags.find(tag => tag.includes('pr-'));
            
            if (prTag) {
              const comment = `## 🐳 Docker Image Built
              
              A Docker image has been built for this PR and is ready for testing:
              
              \`\`\`bash
              docker pull ${prTag}
              docker run -d -p 3001:3001 -v $(pwd)/downloads:/app/downloads ${prTag}
              \`\`\`
              
              The application will be available at: http://localhost:3001
              
              **All tags for this build:**
              ${tags.map(tag => `- \`${tag}\``).join('\n')}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  security-check:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: 'table'
          exit-code: '0'
